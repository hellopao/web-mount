#!/usr/bin/env node
"use strict";
var fs = require('fs');

var mount = require('../index');

var yargs = require('yargs')
	.usage('$0 command')
	.command('start', 'run the web mount server')
	.command('reset', 'stop the web mount server')
	.command('host', 'add hosts')
	.command('ls', 'list the hosts');

var argv = yargs.argv;
var command = argv._[0] || "start";

function execCmd(command) {
	if (command === "start") {
		argv = yargs.reset()
			.option('h', {
				alias: 'host',
				demand: true,
				type: 'string',
				describe: 'the host of your website'
			})
			.option('p', {
				alias: 'port',
				demand: false,
				type: 'string',
				default: "80",
				describe: 'the port of your website'
			})
			.option('r', {
				alias: 'root',
				demand: false,
				type: 'string',
				default: "./",
				describe: 'the root of your website'
			})
		.argv

		mount.setProxy(argv);
		
		return;
	}


	if (command === "host") {
		argv = yargs.reset()
			.option('d', {
				alias: 'domain',
				demand: true,
				type: 'string',
				describe: 'the domain of your website'
			})
			.option('i', {
				alias: 'ip',
				demand: true,
				type: 'string',
				describe: 'the ip of your website'
			})
		.argv
		
		return mount.addHost(argv.domain,argv.ip)
			.then(function (data){
				process.stdout.write(data);
				process.exit();
			})
	}
	
	if (command === "ls") {
		return mount.showHosts()
			.then(function (data){			
				process.stdout.write(data);
				process.exit();
			})
	}
	
	if (command === "reset") {
		mount.resetProxy();
		return;
	}
}

execCmd(command);

var readline = require('readline');
var rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});

rl.on('SIGINT', function () {
	mount.resetProxy();
	process.exit();
});
